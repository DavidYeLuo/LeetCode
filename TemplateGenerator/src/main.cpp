#include "TemplateGenerator.h" // Generated by CMake. Might need to compile for clangd for completion
#include <cstdio>
#include <fstream>
#include <iostream>
#include <string>
int main(int argc, char *argv[]) {
  std::string leetCodeName;
  std::string difficulty;
  std::string id;
  std::string url;

  leetCodeName = UI::prompt("Input leetCodeName: ");
  do {
    difficulty = UI::prompt("Input difficulty(easy:1, medium:2, hard:3): ");
  } while (difficulty != "1" && difficulty != "2" && difficulty != "3");
  id = UI::prompt("Input id: ");
  url = UI::prompt("Input url: ");

  std::ofstream fout_header;
  std::ofstream fout_src;
  std::ifstream fin_header;
  std::ifstream fin_src;

  std::string headerFile;
  std::string sourceFile;

  if (difficulty == "1") {
    headerFile = EASY_INCLUDE_PATH;
    sourceFile = EASY_SRC_PATH;
  } else if (difficulty == "2") {
    headerFile = MEDIUM_INCLUDE_PATH;
    sourceFile = MEDIUM_SRC_PATH;

  } else if (difficulty == "3") {
    headerFile = HARD_INCLUDE_PATH;
    sourceFile = HARD_SRC_PATH;
  }

  headerFile += "/" + leetCodeName + ".h";
  sourceFile += "/" + leetCodeName + ".cpp";

  fin_header.open(headerFile);
  fin_src.open(sourceFile);

  std::string response;
  if (fin_header.is_open() || fin_src.is_open()) {
    while (response != "y" && response != "n" && response != "Y" &&
           response != "N") {
      response = UI::prompt("Override existing file?(y/n): ");
    }
    if (response == "n" || response == "N") {
      printf("Closing.");
      fin_header.close();
      fin_src.close();
      return 0;
    }
  }
  fout_header.open(headerFile);
  fout_src.open(sourceFile);

  fout_header << "[header] leetCodeName: " << leetCodeName << std::endl;
  fout_header << "[header] difficulty: " << difficulty << std::endl;
  fout_header << "[header] id: " << id << std::endl;
  fout_header << "[header] url: " << url << std::endl;

  fout_src << "[source] leetCodeName: " << leetCodeName << std::endl;
  fout_src << "[source] difficulty: " << difficulty << std::endl;
  fout_src << "[source] id: " << id << std::endl;
  fout_src << "[source] url: " << url << std::endl;

  fin_src.close();
  fin_header.close();
  fout_src.close();
  fout_header.close();

  return 0;
}

std::string UI::prompt(const char *message) {
  std::string input;
  std::cout << message;
  std::cin >> input;
  return input;
}
